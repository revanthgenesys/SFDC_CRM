@isTest(SeeAllData=true)
public class LMSNewLicenseComponentControllerTest{
public String userType;
public String soldToAcctId;
public static Contact accountSelection;
public static String xmlStr='\"<?xml version=\"1.0\"?><LicenseFiles><LicenseFile company=\"Finish Line\" bundle=\"CIC 4.0 Production Bundle\" identifier=\"163E4E8A-DD55-4F45-8B60-CF55E1350605\" productLine=\"CIC 4.0\" version=\"4.0\" replaceLicense=\"True\"><Description>Used in production settings.  Licenses are generated by selecting Ordered Items from the Account Summary.</Description><Type>Trial</Type><Features><Feature name=\"I3_FEATURE_VERSION_CIC\" /><Feature name=\"I3_FEATURE_RWP_CITY\" /><Feature name=\"I3_FEATURE_SIP\" /><Feature name=\"I3_FEATURE_SMS\" /><Feature name=\"I3_FEATURE_MEDIA_SERVERS\" /><Feature name=\"I3_FEATURE_ADVANCED_SECURITY\" /><Feature name=\"I3_FEATURE_SU_ALLOWED\" /></Features><Licenses><License name=\"I3_ACCESS_ACD_MEDIA_1\" assigned=\"142\" pooled=\"0\" value=\"142\" /><License name=\"I3_LICENSE_BASIC_STATION\" assigned=\"142\" pooled=\"0\" value=\"142\" /><License name=\"I3_ACCESS_ACD_MEDIA_2\" assigned=\"142\" pooled=\"142\" value=\"284\" /><License name=\"I3_ACCESS_SYSTEM_STATUS_SUPERVISOR_PLUGIN\" assigned=\"10\" pooled=\"6\" value=\"16\" /><License name=\"I3_ACCESS_CLIENT\" assigned=\"142\" pooled=\"0\" value=\"142\" /></Licenses><Servers><Server name=\"TEST\" identifier=\"TEST\" created=\"2018-01-28 20:49:03.000\" expires=\"2100-01-01 00:00:00.000\" hash=\"SsjRZgtjOikuN7ic6dpJRe7SMhCJsC1plODNhbPIQ6L/AieVhMFNoq6ZCdi1hzW/&#xA;MCxFgSw0eJezQYG0avkg5Tmx8E4o11zAeV56ct43I/bOgWV8BnfGYayZ79seqlN3y5kD8zYkVoOpvehCdRV+byfoyMUuKKFWqfXIwbcvb88=&#xA;\"><InvalidatedLicenses><InvalidatedLicense identifier=\"991D793C-2019-4CBD-8FD8-1577CF531261\" /></InvalidatedLicenses></Server></Servers></LicenseFile></LicenseFiles>\"';
public static String badStr = '{\"Message\": \"Server Not Reachable\"}';

   static List<User> getPartnerUsers(){
     //   Account acct = [Select Id from account where name='Avtex' and Status__c='Active' limit 1];
        //Profile p = [Select Id from profile where name='Genesys Portal Partner' limit 1];
        List<String> certList= new List<String>{'157 - Interaction Center Certified Engineer (ICCE) 4.0','158 - ICCS 4.0 - Interaction Center Core Specialist Certification','173 - Perpetual Certification'};
        Map<String,Set<String>> contactAcct = new Map<String,Set<String>>(); // contactid, accountid
        Map<String,String> acctMap = new Map<String,String>(); //id,name
        List<LMS_Certification__c> certificateLst = [Select Id from LMS_Certification__c where name in: certList];//where name='173 - Perpetual Certification' limit 1];
        List<Id> certIds = new List<Id>();
        for(LMS_Certification__c c : certificateLst)
            certIds.add(c.id);
            
        List<Partner_Certifications__c> partnersCertificate = [SELECT Certification__c,Contact__c,contact__r.Name,contact__r.account.name,Email__c,First_Name__c,Id,Last_Name__c,Status__c FROM Partner_Certifications__c WHERE Certification__c =: certIds AND Status__c = 'Completed' AND contact__r.account.status__c='Active'];
        Set<Id> contactIds = new Set<Id>();
        for(Partner_Certifications__c u:partnersCertificate){
            contactIds.add(u.contact__c); 
            
            if(contactAcct.containsKey(u.contact__r.account+'')){
                Set<String> tempId = contactAcct.get(u.contact__r.account+'');
                tempId.add(u.contact__c);
            }
            else{
                contactAcct.put(u.contact__r.account+'',new Set<String>{u.contact__c+''});
                acctMap.put(u.contact__r.account+'',u.contact__r.account.name+'');        
               // system.debug(''+u.contact__r.name+' , '+u.contact__r.account.Name);
            }
         }
     List<Support_Access__c>  supportAccess = [SELECT Id, Contact__c, Contact__R.AccountId, Contact__R.Account.Name  FROM Support_Access__c 
                            WHERE Contact__R.Account.RecordType.Name = 'Enterprise - Business Partner' 
                                AND Contact__R.Account.ININ_ID__c != NULL 
                                AND Status__c = 'Active' 
                                AND SR_Access_Level__c = 'Read/Write' 
                                AND End_User_Account__r.Name = 'Avtex' LIMIT 1];     
    List<user> userlst = [select id,contactid,contact.AccountId from user where Contact.AccountId != NULL AND Contact.AccountId = :supportAccess[0].Contact__R.AccountId and IsActive=TRUE and contactid=:contactIds];
    System.debug(LoggingLevel.ERROR,'userlist:'+userlst.size());
    return userlst;
   }

 static testMethod void ICProdUpdateLicense(){
            PageReference pageRef = Page.LicenseManagement;
            Test.setCurrentPage(pageRef); 
            LicenseManagementController lc = new LicenseManagementController();
            lc.selectedTab='NewLicenseTab';
            lc.accountSelection = accountSelection;
            lc.tabClicked();
         
        Set<String> plVal = new Set<String>();
        for(LMS_ProductLine__c pl: [Select id,productLineName__c,Name from LMS_ProductLine__c])
           plVal.add(pl.productLineName__c);

       List<LMS_License_Types__c> licTypeLst = [Select Id,Description__c,Name,LicenseTypeGUID__c,Expiry_Duration__c,ExpiryType__c,Leagcy_Id__c,Ordered__c,Allow_Addons__c,use_parent__c FROM LMS_License_Types__c]; 
       Id prodLicense;
       Set<String> usageIds = new Set<String>();
       for(LMS_License_Types__c lt : licTypeLst)
           if(lt.name.equalsignorecase('Production'))
               prodLicense = lt.id;     
        
        LMSNewLicenseComponentController controller = new LMSNewLicenseComponentController();

        License_Request_Log__c log = [select Id,IsActive__c,SystemType1__c,mailconnector1__c,MAC_Address__c ,Machine_Name__c, License_Text__c,End_User__c,End_User__r.Name,Sold_to__c,Expiration_Date__c,Generation_Date__c,License_Type__c,
                                    License_Type__r.Name,Product_Line__c,Product_Line__r.ProductLineName__c,Product_Line__r.name, type__c, Product_Line__r.SIP_Product__c, Requested_By__c, Requested_By__r.Name,Install_Site__c,Install_Site__r.Name 
                                    from License_Request_Log__c where License_Type__r.name='Production' and End_User__c <> NULL and MAC_Address__c like '%|%' and isactive__c=true and active__c=true and Product_Line__r.SIP_Product__c=false and End_User__r.Name='Avtex' ORDER BY CreatedDATE DESC limit 1];
        system.debug('inside test class:'+log.id);
        List<License_Usage__c> switchUsage = [SELECT Id,ItemNumber__c,License_Request_Log__c,Product__c FROM License_Usage__c where license_request_log__c =: log.id];
        Set<Id> prodIds = new Set<Id>();
        for(License_Usage__c lic : switchUsage)
           prodIds.add(lic.product__c);
        
        List<LMS_ProductLine_Product_Mapping__c> prodList = [Select Id,Product_Item__c,Product_Part__c from LMS_ProductLine_Product_Mapping__c where licenseType__r.name='Switchover' and Product_part__c in: prodIds];
        if(prodList.size()>0)
        controller.inputs.selectedSwitchover = prodList[0].product_Item__c;
        controller.userType = 'Internal';
        controller.requestType = log.Type__c;
        controller.inputs.requestType = log.type__c; 
        controller.endUserAccountId = log.End_user__c;
        controller.soldToAccountIds = new List<String>{log.Sold_To__c};
        controller.getSoldTo();
        Boolean tesad = controller.isMultipleSoldTos;
        controller.selectedProdLine = log.Product_Line__r.Name; 
        system.debug('Selected Prod Line:'+controller.selectedProdLine+ log.Product_Line__r.ProductLineName__c);
        controller.selectedProduct = log.Product_Line__r.ProductLineName__c;
        controller.selectedInstallSite=log.Install_Site__c;
        controller.requestLogId=log.id;
        controller.selectedLicense = log.License_Type__r.Name;

        Boolean init = controller.init;

        LMSLicenseMockHttpResponseGenerator respGen = new LMSLicenseMockHttpResponseGenerator(log.Product_Line__r.SIP_Product__c);
        Test.setMock(HttpCalloutMock.class, respGen);
        //controller.calloutLicenseService();
        controller.show=true;
        controller.createLog(controller.cleanseXMLString(xmlStr));  
        controller.parse(badStr); 
        
        controller.selectedProdLine = 'Interaction Media Server 4.0'; 
        controller.inputs.selectedServer = 'SY-014-4.0-IE00-B01';     
        controller.dummyAction();
        
        controller.selectedLicense = 'Switchover';
        Controller.selectedLic = [Select Id, Name from LMS_License_Types__c where Name='Switchover'];
        controller.selectedProdLine = 'CIC 2.4';
        License_request_log__c l = [Select Id from license_request_log__c where End_User__r.name = 'CityFleet Networks Limited' and License_Type__r.Name = 'Production' and Product_Line__r.Name = 'CIC 2.4' limit 1];
        controller.inputs.selectedSwitchover = l.id;       
        controller.readLicenseValues(controller.inputs.selectedSwitchover);
        LMS_Utility.processEncryption('test');
    }
    
     static testMethod void SIPUpdateLicense(){
         LMSNewLicenseComponentController controller = new LMSNewLicenseComponentController();
        
        License_Request_Log__c log = [select IsActive__c,SystemType1__c,mailconnector1__c,MAC_Address__c ,Machine_Name__c, License_Text__c,End_User__c,End_User__r.Name,Sold_to__c,Expiration_Date__c,Generation_Date__c,License_Type__c,
                                    License_Type__r.Name,Product_Line__c,Product_Line__r.ProductLineName__c,Product_Line__r.name, Product_Line__r.SIP_Product__c, Requested_By__c, Requested_By__r.Name,Install_Site__c,Install_Site__r.Name 
                                    from License_Request_Log__c where isActive__c=True and License_Type__r.name='Production' and End_User__c <> NULL and Product_Line__r.SIP_Product__c = True and End_User__r.Name='Avtex' limit 1];

        controller.userType = 'Internal';             
        controller.endUserAccountId = log.End_user__c;
        controller.soldToAccountIds = new List<String>{controller.endUserAccountId};
        controller.show = true;
        
        controller.selectedProdLine = log.Product_Line__r.Name; 
        system.debug('Selected Prod Line:'+controller.selectedProdLine+ log.Product_Line__r.ProductLineName__c);
        controller.selectedProduct = log.Product_Line__r.ProductLineName__c;
        controller.selectedInstallSite= log.Install_Site__c;
        controller.requestLogId=log.id;
        controller.selectedLicense = log.License_Type__r.Name;
        Boolean init = controller.init;
        
        LMSLicenseMockHttpResponseGenerator respGen = new LMSLicenseMockHttpResponseGenerator(log.Product_Line__r.SIP_Product__c);
        Test.setMock(HttpCalloutMock.class, respGen);
        controller.calloutLicenseService();
     }
     
      static testMethod void ICUpdateLicense(){
         LMSNewLicenseComponentController controller = new LMSNewLicenseComponentController();
        Account acc = [Select Id from Account where Name='Hosted Services' and Status__c='Active' Limit 1];
        License_Request_Log__c log = [select IsActive__c,SystemType1__c,mailconnector1__c,MAC_Address__c ,Machine_Name__c, License_Text__c,End_User__c,End_User__r.Name,Sold_to__c,Expiration_Date__c,Generation_Date__c,License_Type__c,
                                    License_Type__r.Name,Product_Line__c,type__c,Product_Line__r.ProductLineName__c,Product_Line__r.name, Product_Line__r.SIP_Product__c, Requested_By__c, Requested_By__r.Name,Install_Site__c,Install_Site__r.Name 
                                    from License_Request_Log__c where isActive__c=True and License_Type__r.name='Production' and End_User__c =:acc.Id and Product_Line__r.name='CIC 4.0' limit 1];

        controller.userType = 'Internal'; 
        controller.requestType = log.Type__c;
        controller.inputs.requestType = log.type__c; 
        controller.endUserAccountId = log.End_user__c;
        controller.soldToAccountIds = new List<String>{controller.endUserAccountId};
        controller.show = true;
        
        controller.selectedProdLine = log.Product_Line__r.Name; 
        system.debug('Selected Prod Line:'+controller.selectedProdLine+ log.Product_Line__r.ProductLineName__c);
        controller.selectedProduct = log.Product_Line__r.ProductLineName__c;
        controller.selectedInstallSite= log.Install_Site__c;
        controller.requestLogId=log.id;
        controller.selectedLicense = log.License_Type__r.Name;
        Boolean init = controller.init;
        
        LMSLicenseMockHttpResponseGenerator respGen = new LMSLicenseMockHttpResponseGenerator(log.Product_Line__r.SIP_Product__c);
        Test.setMock(HttpCalloutMock.class, respGen);
        controller.calloutLicenseService();
        controller.validateAddons();
     }
     
     static testMethod void SIPWrapperCoverage(){
         LMS_SIPLicenseGenerationRequestWrapper.InvalidatedLicenseIdentifiers  invalid = new LMS_SIPLicenseGenerationRequestWrapper.InvalidatedLicenseIdentifiers('accId', 'prdid', 'licid', 'identifier', 'abc0001xvs', true);
         LMS_SIPLicenseGenerationRequestWrapper.InvalidatedLicenseIdentifierCollection identifierCollection = new  LMS_SIPLicenseGenerationRequestWrapper.InvalidatedLicenseIdentifierCollection();
         List<LMS_SIPLicenseGenerationRequestWrapper.InvalidatedLicenseIdentifiers> invalidList = new List<LMS_SIPLicenseGenerationRequestWrapper.InvalidatedLicenseIdentifiers>{invalid};
         identifierCollection.InvalidatedLicenseIdentifiers = invalidList;
         LMS_SIPLicenseGenerationRequestWrapper.LMS_LicenseGenerationRequest genReq= new LMS_SIPLicenseGenerationRequestWrapper.LMS_LicenseGenerationRequest();
         genReq.CompanyName= 'sample';
         genReq.MachineId= 'sample';
         genReq.MachineName= 'sample';
         genReq.ProductName= 'sample';
         genReq.VersionNumber= 'sample';
         genReq.Description= 'sample';
         genReq.GenerationDate= 'sample';
         genReq.ExpirationDate= 'sample';
         genReq.Licenses= new Map<String,String>{'sample'=>'Sample'};
         genReq.Features= new List<String> {'sample'};
         genReq.InvalidatedLicenseIdentifierCollection= identifierCollection;
         genReq.BundleType= 0;
         genReq.LicenseTypeGUID= 'sample';
     }
     
     static testMethod void ICProdNewNonOrderedLicense(){
        List<User> usrLst = getPartnerUsers();  
        Map<Id,User> contUserMap = new Map<Id,User>();
        System.debug('ICProdNewNonOrderedLicense: usrLst '+usrLst[0]);  
        system.debug('his account:'+usrLst[0].contact.accountId);   
        System.runAs(usrLst[0]) {
            PageReference pageRef = Page.LicenseManagement;
            Test.setCurrentPage(pageRef); 
            LicenseManagementController lc = new LicenseManagementController();
            lc.selectedTab='NewLicenseTab';
            lc.accountSelection = accountSelection;
            lc.tabClicked();
         
        Set<String> plVal = new Set<String>();
        for(LMS_ProductLine__c pl: [Select id,productLineName__c,Name from LMS_ProductLine__c])
           plVal.add(pl.productLineName__c);

        LMS_License_Types__c licType = [Select Id,Description__c,Name,LicenseTypeGUID__c,Expiry_Duration__c,ExpiryType__c,Leagcy_Id__c,Ordered__c,Allow_Addons__c FROM LMS_License_Types__c where Name='Non-ordered Development' limit 1]; 
      
        
        LMSNewLicenseComponentController controller = new LMSNewLicenseComponentController();
        controller.userType='Partner';
        controller.inputs.requestType = 'Regular';
        controller.requestType = 'Regular';     
        Account selectedAccount = [Select Id from Account limit 1];
        controller.endUserAccountId = selectedAccount.Id;
        controller.soldToAccountIds = new List<String>{controller.endUserAccountId};
        
        LMS_Install_Site__c iSite = new LMS_Install_Site__c(Name = 'New Site');
        insert iSite;
        
        controller.getInstallSites();
        controller.selectedInstallSite  = iSite.id;
        List<SelectOption> optionCoverage = controller.SelectProdType;
        controller.selectedProduct = 'CIC';
        controller.getSecondaryPickVals();
        controller.selectedProdLine = 'CIC 4.0';
        String str = LMSNewLicenseComponentController.noKeyStr;
        controller.getLicenseTypes();
        controller.selectedLicense = licType.name;

        controller.pageTwoCompleted();
        
        if(controller.nonOrderedLicenses.size()>0)
        for(List<LMSNewLicenseComponentController.NonOrderedLicense> nl: controller.nonOrderedLicenses.values()){
            nl[0].licenseObj.assigned='10';
            nl[0].licenseObj.pooled='10';
            nl[0].isSelected = true;
        }    
       controller.log.MAC_Address__c = 'c6115be7f680';
       controller.log.Machine_Name__c = 'c6115be7f680';

       LMSLicenseMockHttpResponseGenerator respGen = new LMSLicenseMockHttpResponseGenerator(FALSE);
        Test.setMock(HttpCalloutMock.class, respGen);
        controller.calloutLicenseService();
        
        controller.selectedProdLine = 'Interaction Media Server 4.0'; 
        controller.populateNonOrdered();
        controller.refresh();
       }      
    }
    
    static testMethod void DummyOrderedLicense(){
     /*  List<User> usrLst = getPartnerUsers();  
        Map<Id,User> contUserMap = new Map<Id,User>();
       System.runAs(usrLst[0]) {*/
        LMSNewLicenseComponentController controller = new LMSNewLicenseComponentController();
        PageReference pageRef = Page.LicenseManagement;
        Test.setCurrentPage(pageRef); 
        LicenseManagementController lc = new LicenseManagementController();
        lc.selectedTab='DummyLicenseTab';
        lc.accountSelection = accountSelection;
        lc.userType='Internal';
        lc.tabClicked();
         
        Set<String> plVal = new Set<String>();
        for(LMS_ProductLine__c pl: [Select id,productLineName__c,Name from LMS_ProductLine__c])
           plVal.add(pl.productLineName__c);

        LMS_License_Types__c licType = [Select Id,Description__c,Name,LicenseTypeGUID__c,Expiry_Duration__c,ExpiryType__c,Leagcy_Id__c,Ordered__c,Allow_Addons__c FROM LMS_License_Types__c where Name='Production' limit 1]; 
      
        

        controller.userType='Internal';
        controller.requestType = 'Dummy';     
        Account selectedAccount = [Select Id from Account limit 1];
        controller.endUserAccountId = selectedAccount.Id;
        controller.soldToAccountIds = new List<String>{controller.endUserAccountId};
        
        List<SelectOption> optionCoverage = controller.SelectProdType;
        controller.selectedProduct = 'CIC';
        controller.getSecondaryPickVals();
        controller.selectedProdLine = 'CIC 4.0';
        String str = LMSNewLicenseComponentController.noKeyStr;
        controller.getLicenseTypes();
        controller.selectedLicense = licType.name;

        controller.getTempTypes();
        controller.selectedTempType = 'PPU';    
        controller.pageTwoCompleted();    
    }    
    
}