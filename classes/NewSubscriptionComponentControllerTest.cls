@isTest(SeeAllData=true)
public class NewSubscriptionComponentControllerTest{
    public static String xmlStr='\"<?xml version=\"1.0\"?><LicenseFiles><LicenseFile company=\"Finish Line\" bundle=\"CIC 4.0 Production Bundle\" identifier=\"163E4E8A-DD55-4F45-8B60-CF55E1350605\" productLine=\"CIC 4.0\" version=\"4.0\" replaceLicense=\"True\"><Description>Used in production settings.  Licenses are generated by selecting Ordered Items from the Account Summary.</Description><Type>Trial</Type><Features><Feature name=\"I3_FEATURE_VERSION_CIC\" /><Feature name=\"I3_FEATURE_RWP_CITY\" /><Feature name=\"I3_FEATURE_SIP\" /><Feature name=\"I3_FEATURE_SMS\" /><Feature name=\"I3_FEATURE_MEDIA_SERVERS\" /><Feature name=\"I3_FEATURE_ADVANCED_SECURITY\" /><Feature name=\"I3_FEATURE_SU_ALLOWED\" /></Features><Licenses><License name=\"I3_ACCESS_ACD_MEDIA_1\" assigned=\"142\" pooled=\"0\" value=\"142\" /><License name=\"I3_LICENSE_BASIC_STATION\" assigned=\"142\" pooled=\"0\" value=\"142\" /><License name=\"I3_ACCESS_ACD_MEDIA_2\" assigned=\"142\" pooled=\"142\" value=\"284\" /><License name=\"I3_ACCESS_SYSTEM_STATUS_SUPERVISOR_PLUGIN\" assigned=\"10\" pooled=\"6\" value=\"16\" /><License name=\"I3_ACCESS_CLIENT\" assigned=\"142\" pooled=\"0\" value=\"142\" /></Licenses><Servers><Server name=\"TEST\" identifier=\"TEST\" created=\"2018-01-28 20:49:03.000\" expires=\"2100-01-01 00:00:00.000\" hash=\"SsjRZgtjOikuN7ic6dpJRe7SMhCJsC1plODNhbPIQ6L/AieVhMFNoq6ZCdi1hzW/&#xA;MCxFgSw0eJezQYG0avkg5Tmx8E4o11zAeV56ct43I/bOgWV8BnfGYayZ79seqlN3&#xA;y5kD8zYkVoOpvehCdRV+byfoyMUuKKFWqfXIwbcvb88=&#xA;\"><InvalidatedLicenses><InvalidatedLicense identifier=\"991D793C-2019-4CBD-8FD8-1577CF531261\" /></InvalidatedLicenses></Server></Servers></LicenseFile></LicenseFiles>\"';
    public static String newApixmlStr='\"<?xml version=\"1.0\"?><LicenseFiles><LicenseFile company=\"Finish Line\" companyId=\"001U000000YdGkTIAV\" genesysId=\"51777\" bundle=\"CIC 4.0 Production Bundle\" identifier=\"163E4E8A-DD55-4F45-8B60-CF55E1350605\" productLine=\"CIC 4.0\" version=\"4.0\" replaceLicense=\"True\"><Description>Used in production settings.  Licenses are generated by selecting Ordered Items from the Account Summary.</Description><Type>Trial</Type><Features><Feature name=\"I3_FEATURE_VERSION_CIC\" /><Feature name=\"I3_FEATURE_RWP_CITY\" /><Feature name=\"I3_FEATURE_SIP\" /><Feature name=\"I3_FEATURE_SMS\" /><Feature name=\"I3_FEATURE_MEDIA_SERVERS\" /><Feature name=\"I3_FEATURE_ADVANCED_SECURITY\" /><Feature name=\"I3_FEATURE_SU_ALLOWED\" /></Features><Licenses><License name=\"I3_ACCESS_ACD_MEDIA_1\" assigned=\"142\" pooled=\"0\" value=\"142\" /><License name=\"I3_LICENSE_BASIC_STATION\" assigned=\"142\" pooled=\"0\" value=\"142\" /><License name=\"I3_ACCESS_ACD_MEDIA_2\" assigned=\"142\" pooled=\"142\" value=\"284\" /><License name=\"I3_ACCESS_SYSTEM_STATUS_SUPERVISOR_PLUGIN\" assigned=\"10\" pooled=\"6\" value=\"16\" /><License name=\"I3_ACCESS_CLIENT\" assigned=\"142\" pooled=\"0\" value=\"142\" /></Licenses><Servers><Server name=\"TEST\" identifier=\"TEST\" created=\"2018-01-28 20:49:03.000\" expires=\"2100-01-01 00:00:00.000\" hash=\"SsjRZgtjOikuN7ic6dpJRe7SMhCJsC1plODNhbPIQ6L/AieVhMFNoq6ZCdi1hzW/&#xA;MCxFgSw0eJezQYG0avkg5Tmx8E4o11zAeV56ct43I/bOgWV8BnfGYayZ79seqlN3&#xA;y5kD8zYkVoOpvehCdRV+byfoyMUuKKFWqfXIwbcvb88=&#xA;\"><InvalidatedLicenses><InvalidatedLicense identifier=\"991D793C-2019-4CBD-8FD8-1577CF531261\" /></InvalidatedLicenses></Server></Servers><AmazonS3Credentials userName=\"AKIAIMTO3HCQJ4TH4ULQ\" userPassword=\"FYg/8w4oq4LeVF2108OMcOASCjQZdOwG55F3sP0uvFLHe2i1CIMPnQrXbeDu9WWs&#10;JhKx+ezC/1bu8wnbPWEJ0rb4xD0ooTiIlRrH0Gj+bCuI26JIelr+vE7N1aC/+IDN&#10;k4zbflfMNmhuQfMuVOMHF+Vl0uHe2X35JUma7kd3SBM=&#10;\" hash=\"MGBrDoQ1kuqb3DHIOf8RUFmLKIcuRccKooNaVdg1iAHBDr55nPHCPJgcDyewsizy&#10;esMqYAMLW/j01FzMaKsgMHZSOGT3ml9vMh2lbIGlKuj+qEWskdkQyrI6fFcmYZcK&#10;XEPpZXCgFFiWaw7/165+R5bH81CB5UX6NlzNtoD92/o=&#10;\" /></LicenseFile></LicenseFiles>\"';    
    
     
     static testMethod void NewSubscriptionOrder(){
        PageReference pageRef = Page.SubscriptionManagement;
        Test.setCurrentPage(pageRef); 
        subscriptionManagementController lc = new subscriptionManagementController();
        lc.selectedTab='NewLicenseTab';

        lc.tabClicked();
         
        NewSubscriptionComponentController controller = new NewSubscriptionComponentController();
        
        Account selectedAccount = [Select Id from Account where Name='Avtex' and Status__c='Active' limit 1];
        BigMachines__Quote__c quot = [Select Id,order__c,Usage_Data_Submission_Method__c from BigMachines__Quote__c where order__c<>NULL limit 1];
        controller.accountSelection.accountId = selectedAccount.Id;
        controller.endUserAccountId = selectedAccount.Id;       
        controller.orderOpt.order__c = quot.order__c;
        List<SelectOption> pline = controller.ProductLines; 
        controller.newApi = false;     
        controller.show = false;
        controller.selectedProductLine = 'SIP Proxy 4.0';
        controller.selectedProdLine = 'SIP Proxy 4.0';
        controller.pageTwoCompleted();
        //controller.encrypt('test');
        //controller.decrypt('test==test'); 
 //       controller.isSIP = true;
        controller.log.MAC_Address__c = 'c6115be7f680';
        //controller.switchHostIds='c6115be7f666';
        controller.log.Machine_Name__c = 'c6115be7f680';
        controller.switchmachineNames = 'c6115be7f666';
        controller.log.Expiration_Date__c = system.now();
        /*controller.licenseSummaryData[0].orderedQty = 5; 
        for(LicenseSummaryWrapper wr : controller.addonSummaryData) 
            wr.orderedQty = 5;   
        */
         controller.createDeployment();
        LMSLicenseMockHttpResponseGenerator respGen = new LMSLicenseMockHttpResponseGenerator(FALSE);
        Test.setMock(HttpCalloutMock.class, respGen);
        controller.calloutLicenseService();
        controller.refresh();
        String str = NewSubscriptionComponentController.noKeyStr;
        
        controller.log.MAC_Address__c = 'c6115be7f680|c6115be7f681';
        controller.log.Machine_Name__c = 'c6115be7f680|c6115be7f680';
        controller.log.Expiration_Date__c = system.now();
        controller.selectedProductLine = 'CIC 4.0';
        controller.selectedProdLine = 'CIC 4.0';
        controller.pageTwoCompleted(); 
        controller.isSip=false;
        controller.GeneratePayload(); 
        new newSubscriptionComponentController.LicenseAssignedPooled('name',0,1); 
        
       /* controller.cleanseXMLString(newApixmlStr);
        for(LicenseSummaryWrapper wr : controller.addonSummaryData) 
            wr.orderedQty = 5;   
      
        controller.createDeployment();  
        Test.startTest(); 
        SubscriptionMockHttpResponseGenerator respGen1 = new SubscriptionMockHttpResponseGenerator(TRUE);
        Test.setMock(HttpCalloutMock.class, respGen1);
        controller.calloutLicenseService();
        
        controller.isSIP = true;  
        controller.calloutLicenseService(); 
        Test.stopTest();
        controller.refresh();*/
       }    
      
    static testMethod void NewSubscriptionAPIOrder(){
        PageReference pageRef = Page.SubscriptionManagement;
        Test.setCurrentPage(pageRef); 
        subscriptionManagementController lc = new subscriptionManagementController();
        lc.selectedTab='NewLicenseTab';

        lc.tabClicked();
         
        NewSubscriptionComponentController controller = new NewSubscriptionComponentController();
        
        Account selectedAccount = [Select Id from Account where Status__c='Active' and Name='CPP Turkiye' limit 1];
        BigMachines__Quote__c quot = [Select Id,order__c,Usage_Data_Submission_Method__c from BigMachines__Quote__c where order__c<>NULL limit 1];
        controller.accountSelection.accountId = selectedAccount.Id;
        controller.endUserAccountId = selectedAccount.Id;       
        controller.orderOpt.order__c = quot.order__c;
        List<SelectOption> pline = controller.ProductLines; 
        controller.selectedProductLine = 'Tracking API';
        controller.newApi = true;
        controller.selectedProdLine = 'CIC 4.0';
        controller.pageTwoCompleted();
        controller.encrypt('test');
        controller.decrypt('test==test'); 
        controller.isSIP = true;
        controller.resetPaginationKey(); 
        controller.log.MAC_Address__c = 'c6115be7f680';
        controller.switchHostIds='c6115be7f666';
        controller.log.Machine_Name__c = 'c6115be7f680';
        controller.switchmachineNames = 'c6115be7f666';
        controller.log.Expiration_Date__c = system.now();
        controller.licenseSummaryData[0].orderedQty = 5; 
        for(LicenseSummaryWrapper wr : controller.addonSummaryData) 
            wr.orderedQty = 5;   
        SubscriptionS3MockHttpResponseGenerator keyGen = new SubscriptionS3MockHttpResponseGenerator('username'); 
        Test.setMock(HttpCalloutMock.class, keyGen);
        controller.createDeployment();
        
        LMSLicenseMockHttpResponseGenerator respGen = new LMSLicenseMockHttpResponseGenerator(FALSE);
        Test.setMock(HttpCalloutMock.class, respGen);
        controller.calloutLicenseService();
        controller.refresh();
        String str = NewSubscriptionComponentController.noKeyStr;
        
        controller.newApi = true;
        controller.show = true;
        controller.selectedProductLine = 'SIP Proxy 4.0';
        controller.selectedProdLine = 'SIP Proxy 4.0';
        controller.pageTwoCompleted();
        controller.log.MAC_Address__c = 'c6115be7f680';
        controller.switchHostIds='c6115be7f666';
        controller.log.Machine_Name__c = 'c6115be7f680';
        controller.switchmachineNames = 'c6115be7f666';
        controller.log.Expiration_Date__c = system.now();
        /*controller.licenseSummaryData[0].orderedQty = 5;  
        controller.cleanseXMLString(newApixmlStr);
        for(LicenseSummaryWrapper wr : controller.addonSummaryData) 
            wr.orderedQty = 5;   
        controller.createDeployment();  */
        Test.startTest(); 
        SubscriptionS3MockHttpResponseGenerator keyGen1 = new SubscriptionS3MockHttpResponseGenerator('username'); 
        Test.setMock(HttpCalloutMock.class, keyGen1);
        controller.generateKey('SAMPLE123','','username');
        
        SubscriptionS3MockHttpResponseGenerator keyGen2 = new SubscriptionS3MockHttpResponseGenerator('username'); 
        Test.setMock(HttpCalloutMock.class, keyGen2);
        controller.generateKey('TESTDATA','SAMPLE123','object');
        
        SubscriptionMockHttpResponseGenerator respGen1 = new SubscriptionMockHttpResponseGenerator(TRUE);
        Test.setMock(HttpCalloutMock.class, respGen1);
        controller.calloutLicenseService();
        
        LMS_LicenseGenerationRequestWrapper.Licenses license = new LMS_LicenseGenerationRequestWrapper.Licenses();
        
        controller.isSIP = true;  
        controller.calloutLicenseService(); 
        Test.stopTest();
        controller.refresh();
       }    
    
       static testMethod void SubscriptionActivity(){
        PageReference pageRef = Page.SubscriptionManagement;
        Test.setCurrentPage(pageRef); 
        subscriptionManagementController lc = new subscriptionManagementController();
        lc.selectedTab='LicenseActivityTab';

        lc.tabClicked();
         
        SubscriptionActivityComponentController controller1 = new SubscriptionActivityComponentController();
        controller1.goClicked();
        controller1.getActiveInactive();
        controller1.clearFilters();
        Subscription_Request_Log__c selectedAccount = [Select Id,End_User__c,Generation_Date__c from Subscription_Request_Log__c
                                                       where product_type__c = 'SIP Proxy 4.0'
                                                       order by Generation_Date__c DESC limit 1];
        controller1.accountSelection.accountId = selectedAccount.End_User__c;
        controller1.endUserAccountId = selectedAccount.End_User__c;       

        List<SubscriptionActivityComponentController.LicenseRequestWrapper> l = controller1.getLicenseRequests(); 
         if(l.size()>0)
        controller1.selectedLicenseRequestId = l[0].id;
        controller1.deactivateLicense();
        controller1.hideAlert();
        controller1.showAlert();
        controller1.cancel();
        
        Test.setCurrentPageReference(new PageReference('Page.SubscriptionView'));

        System.currentPageReference().getParameters().put('id', l[0].id);    
        SubscriptionViewController cont = new SubscriptionViewController();
        
        Test.setCurrentPageReference(new PageReference('Page.SubscriptionDownload'));
        System.currentPageReference().getParameters().put('id', l[0].id);    
        SubscriptionDownloadController cont1 = new SubscriptionDownloadController();

       }
    
       static testMethod void SubscriptionActivity1(){
        Subscription_Request_Log__c selectedRequest = [Select Id,End_User__c,Generation_Date__c from Subscription_Request_Log__c
                                                       where product_type__c = 'CIC 4.0'
                                                       order by Generation_Date__c DESC limit 1];
        
        
        Test.setCurrentPageReference(new PageReference('Page.SubscriptionView'));

        System.currentPageReference().getParameters().put('id', selectedRequest.id);    
        SubscriptionViewController cont = new SubscriptionViewController();
       }

    static testMethod void NewSubscriptionOrder2(){
        PageReference pageRef = Page.SubscriptionManagement;
        Test.setCurrentPage(pageRef); 
        subscriptionManagementController lc = new subscriptionManagementController();
        lc.selectedTab='NewLicenseTab';

        lc.tabClicked();
         
        NewSubscriptionComponentController controller = new NewSubscriptionComponentController();
        
        Account selectedAccount = [Select Id from Account where Name='Avtex' and Status__c='Expired Maintenance' AND RecordType.Name ='EMG - Customer Record Type'];
        BigMachines__Quote__c quot = [Select Id,order__c,Usage_Data_Submission_Method__c from BigMachines__Quote__c where order__c<>NULL limit 1];
        
        Subscription_Request_Log__c log=[SELECT Id,Cloud_Deployment__c,mac_address__c,Machine_Name__c FROM Subscription_Request_Log__c WHERE id='aMx0d0000008Oa9CAE'];
        log.Expiration_Date__c=system.now().AddDays(30);
        update log;
        List<License_Usage__c> Lstusage=[Select Id,Name,itemnumber__c,Quantity_Used__c from License_Usage__c WHERE itemnumber__c!=null limit 1000];
        
        controller.LicenseUsageList=Lstusage;
        controller.accountSelection.accountId = selectedAccount.Id;
        controller.endUserAccountId = selectedAccount.Id;       
        controller.orderOpt.order__c = quot.order__c;
        List<SelectOption> pline = controller.ProductLines; 
        controller.newApi = true;     
        controller.show = true;
        controller.selectedProductLine = 'CIC 4.0';
        controller.selectedProdLine = 'CIC 4.0';
        controller.pageTwoCompleted();
        controller.log.MAC_Address__c = 'c6115be7f680';
        controller.log.Machine_Name__c = 'c6115be7f680';
        controller.switchmachineNames = 'c6115be7f666';
        controller.log.Expiration_Date__c = system.now();
        controller.createDeployment();
        LMSLicenseMockHttpResponseGenerator respGen = new LMSLicenseMockHttpResponseGenerator(FALSE);
        Test.setMock(HttpCalloutMock.class, respGen);
        controller.calloutLicenseService();
        controller.refresh();
        String str = NewSubscriptionComponentController.noKeyStr;
        
        controller.log.MAC_Address__c = 'c6115be7f680|c6115be7f681';
        controller.log.Machine_Name__c = 'c6115be7f680|c6115be7f680';
        controller.log.Expiration_Date__c = system.now();
        controller.selectedProductLine = 'CIC 4.0';
        controller.selectedProdLine = 'CIC 4.0';
        controller.selectedLicense='Production';
        controller.pageTwoCompleted(); 
        controller.isSip=false;
        controller.newApi = true;     
        controller.show = true;
        controller.GeneratePayload(); 
        
        list<string> lstSIPFeatures= new List<String>{'String1','String2'};
        controller.isSip=true;
        controller.newApi = false;     
        controller.show = true;
        controller.SIPFeatures=lstSIPFeatures;
        controller.GeneratePayload(); 
        
        controller.log=log;
        controller.populateLicense();
        controller.isSip=false;
        controller.newApi = false; 
        
        Map<String,Set<License_Translations__c>> partTranslations = new Map<String,Set<License_Translations__c>>();
        for(License_Translations__c lt : [SELECT Id, product__c,product__r.product_name__c,product__r.Building_Block__c, Item_Number__c,License_Key__r.category__c, License_Key__r.Key_Name__c, Multiplier__c, Assigned_Multiplier__c, Show_Assigned_Multiplier__c FROM License_Translations__c WHERE item_number__c !=null]){
            Set<License_Translations__c> tset = new Set<License_translations__c>();
              tset.add(lt); 
            partTranslations.put(lt.Item_Number__c,tset);
        }
        Map<String,Product2> partMaster =new Map<String,Product2>();  
        
        for(Product2 part: [select Id,Product_Name__c,Product_Sub_category__c,Name,Building_Block__c,APN_Number__c,perpetual_product__c,perpetual_product__r.APN_Number__c 
                             From product2 
                             where isactive=true and offeringtype__c includes (: 'PureConnect Subscription') AND 
                             //item_category__c in:Item_Category AND 
                             (NOT APN_Number__c like '3GP%') AND 
                             (NOT APN_Number__c like 'TS%') AND
                             (NOT APN_Number__c like 'TH%') AND
                             APN_Number__c<>NULL ]){
            partMaster.put(part.APN_Number__c,part);
                             }
        controller.partTranslations=partTranslations;
        controller.partMaster=partMaster;
        controller.sumAllLicenses();
        controller.processKeys();
        controller.addDisplayInfo();
        controller.LicenseUsageList=Lstusage;
        Map<String,Product2> populatedPartProducts = new  Map<String,Product2>();
         List<Product2> p=[SELECT id,Name,APN_Number__c,Description,(select id,LicenseType__c from ProductLineProducts__r) productLineProduct from Product2 where APN_Number__c !=null];
            for(Product2 pr:p){
                populatedPartProducts.put(pr.APN_Number__c,pr);
            }
        controller.populatedPartProducts=populatedPartProducts;
        controller.cleanseXMLString(newApixmlStr);
        controller.createLog(newApixmlStr);
        controller.partTranslations=partTranslations;
        controller.partMaster=partMaster;
        controller.LicenseUsageList=Lstusage;
        controller.processKeys();
        controller.isSip=true;
        controller.newApi = false; 
        controller.createLog(newApixmlStr);
        controller.newApi = true; 
        controller.createLog(newApixmlStr);
        controller.parseDate(string.valueOf(system.now()));
        controller.hasLicense=true;
        controller.hasLicense=true;
        controller.showSystemType=true;
        controller.showMailConnector=true;
        controller.urlPrefix='gesesys.com';
        controller.soldToAccountId='Avtex';
        controller.hasFeature=true;
        controller.show = true;
        //controller.populateLicense();
        new newSubscriptionComponentController.LicenseAssignedPooled('name',0,1); 
        
       }        
}