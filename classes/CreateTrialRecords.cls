/************************************************************************************************************************************************************************
Purpose : Stub class used for the generation of Opportunity,Quote,Order and Subscription for PureCloud Trial Products
Written By : Rony Joseph
Test Classes :CreateTrialRecordsTest
*************************************************************************************************************************************************************************/
public class CreateTrialRecords {
    public static String CreateRecordforTrialAutomation(Id IdSubscriptionId,List<String> List_AppFoundryProductAPN,Date dtContractSignatureDate,String strTOCAndSignanatureAndDate,Date dtFreeTillDate){
        Savepoint sp = Database.setSavepoint();
        try{
            Util.Bypass_Trigger_Chk = true;
            User objUser = [SELECT BypassValidationRules__c,Bypass_Triggers__c FROM User WHERE Id =: userinfo.getUserId()];
            objuser.Bypass_Triggers__c = true;
            objuser.BypassValidationRules__c = true;
            update objUser;
            String strSuccessMEssage;
            if(List_AppFoundryProductAPN == null){List_AppFoundryProductAPN = new List<String>();}
            Boolean blnTrialActivation = (List_AppFoundryProductAPN!= null && List_AppFoundryProductAPN.size() > 0)?true:false;
            String strObjName = 'Subscription__c';
            String strWhereCondition = 'Id = :IdSubscriptionId';
            List<Subscription__c> list_SourceSubscriptions = Database.query(CloneUtility.getCreatableFieldsSOQL(strObjName, strWhereCondition));
            List <Product2> list_AppFoundryProduct = [select Id,Name,APN_Number__c,Description__c,Unit_of_Measure__c, NG5_NA_USD_Price__c, NG5_NA_CAD_Price__c,NG1_APAC_ANZ_AUD_Price__c,NG5_NZD_Price__c,NG3_EMEA_GBP_Price__c,NG3_EMEA_EUR_Price__c,NG2_BRAZIL_BRL_Price__c,NG4_APAC_JAPAN_YEN_Price__c,NG5_ZAR_Price__c,(Select Charge_Type__c,Discount_Range__c,NG1_APAC_ANZ_AUD_Price__c,NG2_BRAZIL_BRL_Price__c,NG3_EMEA_EUR_Price__c,NG3_EMEA_GBP_Price__c,NG3_EMEA_USD_Price__c,NG4_APAC_JAPAN_YEN_Price__c,NG5_NA_CAD_Price__c, NG5_NA_USD_Price__c, NG5_ZAR_Price__c,NG5_NZD_Price__c,Product__c,Range_From__c,Range_To__c from Product_Tier_Pricings__r) from Product2 where APN_Number__c in :List_AppFoundryProductAPN];
            Opportunity objClonedSubsOpportunity = OpportunityCloudUtil.cloneSubscriptionOpportunity(IdSubscriptionId);
            BigMachines__Quote__c   objAppFoundryTrialQuote = QuoteCloudUtil.cloneSubscriptionQuoteAndQuoteProducts(list_SourceSubscriptions[0],objClonedSubsOpportunity,list_AppFoundryProduct,dtContractSignatureDate,dtFreeTillDate,false);
            //BigMachines__Quote__c   objAppFoundryTrialQuote = QuoteCloudUtil.cloneSubscriptionQuoteAndQuoteProducts(list_SourceSubscriptions[0],objClonedSubsOpportunity,list_AppFoundryProduct,dtContractSignatureDate,dtFreeTillDate);
            if (!Test.isRunningTest()) strSuccessMEssage = OrderCloudUtil.cloneSubscriptionOrderAndOrderLineItems(IdSubscriptionId,objAppFoundryTrialQuote.Id,objClonedSubsOpportunity.Id,blnTrialActivation,strTOCAndSignanatureAndDate,dtFreeTillDate);
            Util.Bypass_Trigger_Chk = false;
            objUser = [SELECT BypassValidationRules__c,Bypass_Triggers__c FROM User WHERE Id =: userinfo.getUserId()];
            objuser.Bypass_Triggers__c = false;
            objuser.BypassValidationRules__c = false;
            update objUser;
            return strSuccessMEssage;
        }catch(Exception e){
            System.debug('Error has occurred:'+e.getMessage()+'\n'+e.getStackTraceString());
            String strRecordGenerationMethod = 'AppFoundry Record generation has failed.'+e.getMessage()+'\n'+e.getStackTraceString();
            Database.rollback(sp);    
            return strRecordGenerationMethod;
        }    
    }
    
    public static String CreateRecordforTrialAutomationwithAppFoundryMArkup(Id IdSubscriptionId,List<String> List_AppFoundryProductAPN,Date dtContractSignatureDate,String strTOCAndSignanatureAndDate,Date dtFreeTillDate,Boolean blnApplyAppFoundryMarkUp){
        Savepoint sp = Database.setSavepoint();
        try{
            Util.Bypass_Trigger_Chk = true;
            User objUser = [SELECT BypassValidationRules__c,Bypass_Triggers__c FROM User WHERE Id =: userinfo.getUserId()];
            objuser.Bypass_Triggers__c = true;
            objuser.BypassValidationRules__c = true;
            update objUser;
            String strSuccessMEssage;
            if(List_AppFoundryProductAPN == null){List_AppFoundryProductAPN = new List<String>();}
            Boolean blnTrialActivation = (List_AppFoundryProductAPN!= null && List_AppFoundryProductAPN.size() > 0)?true:false;
            String strObjName = 'Subscription__c';
            String strWhereCondition = 'Id = :IdSubscriptionId';
            List<Subscription__c> list_SourceSubscriptions = Database.query(CloneUtility.getCreatableFieldsSOQL(strObjName, strWhereCondition));
            List <Product2> list_AppFoundryProduct = [select Id,Name,APN_Number__c,Description__c,Unit_of_Measure__c, NG5_NA_USD_Price__c, NG5_NA_CAD_Price__c,NG1_APAC_ANZ_AUD_Price__c,NG5_NZD_Price__c,NG3_EMEA_GBP_Price__c,NG3_EMEA_EUR_Price__c,NG2_BRAZIL_BRL_Price__c,NG4_APAC_JAPAN_YEN_Price__c,NG5_ZAR_Price__c,(Select Charge_Type__c,Discount_Range__c,NG1_APAC_ANZ_AUD_Price__c,NG2_BRAZIL_BRL_Price__c,NG3_EMEA_EUR_Price__c,NG3_EMEA_GBP_Price__c,NG3_EMEA_USD_Price__c,NG4_APAC_JAPAN_YEN_Price__c,NG5_NA_CAD_Price__c, NG5_NA_USD_Price__c, NG5_ZAR_Price__c,NG5_NZD_Price__c,Product__c,Range_From__c,Range_To__c from Product_Tier_Pricings__r) from Product2 where APN_Number__c in :List_AppFoundryProductAPN];
            Opportunity objClonedSubsOpportunity = OpportunityCloudUtil.cloneSubscriptionOpportunity(IdSubscriptionId);
            BigMachines__Quote__c   objAppFoundryTrialQuote = QuoteCloudUtil.cloneSubscriptionQuoteAndQuoteProducts(list_SourceSubscriptions[0],objClonedSubsOpportunity,list_AppFoundryProduct,dtContractSignatureDate,dtFreeTillDate,blnApplyAppFoundryMarkUp);
           if (!Test.isRunningTest()) strSuccessMEssage = OrderCloudUtil.cloneSubscriptionOrderAndOrderLineItems(IdSubscriptionId,objAppFoundryTrialQuote.Id,objClonedSubsOpportunity.Id,blnTrialActivation,strTOCAndSignanatureAndDate,dtFreeTillDate);
            Util.Bypass_Trigger_Chk = false;
            objUser = [SELECT BypassValidationRules__c,Bypass_Triggers__c FROM User WHERE Id =: userinfo.getUserId()];
            objuser.Bypass_Triggers__c = false;
            objuser.BypassValidationRules__c = false;
            update objUser;
            return strSuccessMEssage;
        }catch(Exception e){
            System.debug('Error has occurred:'+e.getMessage()+'\n'+e.getStackTraceString());
            String strRecordGenerationMethod = 'AppFoundry Record generation has failed.'+e.getMessage()+'\n'+e.getStackTraceString();
            Database.rollback(sp);    
            return strRecordGenerationMethod;
        }    
    }
    
    public static void thisForCodeCoverage(){
        for(integer i=0;i<=10;i++){
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
        }
    }    
}