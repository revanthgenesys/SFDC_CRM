<apex:component >

<apex:attribute name="articleTypes" type="String" required="true" description="handle to the pkb controller" />
<apex:attribute name="articleTypesLabels" type="pkb_Controller" required="true" description="handle to the pkb controller" />
<apex:attribute name="occurenceKey" type="String" required="false" description="String used to force uniqueness of the ids, use empty for first one" default=""/>

    <span>Article Type</span><br />

    <!-- Mariya Steason: 2014-07-26
         Following is a fix for the following bug:
         When selecting the --No_Filter-- option in the ArticleType dropdown, the resulting URL retains the previously selected article type.
         What should happen is that URL should no longer have the article type as a parameter in the URL (&at=...)
         On research, I found that the javascript function setArticleType (which source can be found in the Component pkb_js),
         does not skip the first entry, which is --No-Filter--
         The other selectors (for Product Line and Product), do have logic to skip the option with a selectedIndex of 0.
         I took a copy of the original javascript setArticleType, and created a new function named setArticleTypeNoFilter and embedded it in this (pkb_articletypeselect) Component.
         Also, the original <select> tag has been modified to invoke the new function setArtcileTypeNoFilter.
         Following (inside these comments) is the original <select> tag
    <select id="articleTypeSelector{!occurenceKey}" onchange="setArticleType(this);"><option value="">--{!$Label.PKB2_No_Filter}--</option></select>
     -->
    <select id="articleTypeSelector{!occurenceKey}" onchange="setArticleTypeNoFilter(this);"><option value="">--{!$Label.PKB2_No_Filter}--</option></select>

    <script type="text/javascript">
        var aTypes = "{!articleTypes}".split(",");
        var aLabels = "{!articleTypesLabels}".split(",");
        var select = jQuery("#articleTypeSelector{!occurenceKey}");
        for( var i = 0; i < aTypes.length; i++ ) {
            var selected = "";
            if( GET.at == aTypes[i] ) selected = "selected='selected'";
            select.append(jQuery("<option value='"+aTypes[i]+"' "+selected+"></option").text(aLabels[i]));
        }
        

    </script>
    
    <script type="text/javascript">
    // The following function was copied from the Component: pkb_js, javascript function: setArticleType
    // It has been modified to skip the entry with selectedIndex 0, which should be --No-Filter--
function setArticleTypeNoFilter(e) {
  var i;
  var o;
  var selects = jQuery("#articleTypeSelector");  
  selectedArticleTypes = new Array();

  // check all of the select lists in the narrow search section and pull out the selected values
  // Skip the --No-Filter-- option (which should be the one with selectedIndex of 0)
  for (i = 0; i < selects.length; i++) {
    o = selects[i];
    if (o.selectedIndex > 0) selectedArticleTypes.push(o.options[o.selectedIndex].value);      
  }
  buildSearchHref();
  doSearch();
}
    </script>

</apex:component>